#!/usr/bin/env python
import datetime as dt
DATEFMT = "%Y%m%d_%H%M%S"
import os
import numpy as np
import matplotlib.pyplot as plt
# 20191219_043911_muos_ea99_dm224.75_sn8.50.fbson
# 0-------1------2----3----4--------5
# 20200120_080541_muos_ea99_dm203.69_sn8.71_wd76.56.fbson
# 0-------1------2----3----4--------5------6
def oneAction (filename):
    '''Takes filename and returns 
    datetime object, ant, sn, dm and wd'''
    fname,_ = os.path.splitext(filename.strip())
    toks = fname.split ("_")
    date_str, ant = None, None
    sn, dm, wd = None, None, None
    ret = None
    try:
        date_str = "_".join(toks[:2])
        ant = toks[3]
        ret = dt.datetime.strptime(date_str, DATEFMT) 
        dm  = float(toks[4][2:])
        sn  = float(toks[5][2:]) 
        if len(toks) == 7:
            wd  = float(toks[6][2:]) 
    except Exception as e:
        print ("exp=", e)
        print ( "Error reading fbson:", fname )
    return ret, ant, sn, dm, wd

def ParseArgs():
    import argparse
    '''For argument parsing'''
    ap = argparse.ArgumentParser(prog='agdatelog', description='Asgard tool for fbson dump logkeeping.', epilog='Part of Asgard')
    add = ap.add_argument
    add('dir', help = 'List of fbsons. Files like *.list', type=str, default="/mnt/ssd/dumps", nargs='+')
    # last known
    add('--later', help = 'Last known/processed fbson. Either *.list or *.fbson.', default=None, dest='last')
    # maxgap
    add('--gap', help = 'Maximum gap between fbsons (in minutes).', default=150, dest='gap', type=int)
    # summary
    add('-s', help = 'Summary statistics', default=False, action='store_true', dest='summary')
    # plot scatter
    add('-p', help = 'Plot scatter of S/N, DM and width.', default=None, dest='plotscat')
    # last k
    add('-k', help = 'Last k max candidates.', default=None, dest='k', type=int)
    # o
    add('-o', help = 'List the sieved fbsons in a file', dest = 'list', default=None)
    return ap.parse_args()

def count (dates, start, stop):
    '''dates is array'''
    dates = np.array(dates)
    return np.sum (np.logical_and(dates >= start, dates <= stop))

if __name__ == "__main__":
    args = ParseArgs()
    print ("")
    # INPUT stage
    INPUT = []
    for of in args.dir:
        with open (of, "r") as f:
            INPUT = INPUT + f.readlines()
    # DATE stage
    DATE, ANT, SN, DM, WD = [],[],[],[],[]
    for f in INPUT:
        d,a,s,m,w = oneAction (f)
        DATE.append (d)
        ANT.append  (a)
        SN.append   (s)
        DM.append   (m)
        WD.append   (w)
    # FILTER stage
    uDATE = np.unique (DATE)
    udD   = np.diff (uDATE)
    cutoff = dt.timedelta (seconds=args.gap*60)
    breaks, = np.where (udD >= cutoff)
    # LOG stage
    NFBSON = 0
    ONDUR    = dt.timedelta(0)
    OFFDUR   = dt.timedelta(0)
    a = 0
    for ib,b in enumerate(breaks):
        if ib != 0:
            dur = uDATE[a] - uDATE[breaks[ib-1]]
            print ("----------------------------")
            print ("Offsky :", dur)
            OFFDUR = OFFDUR + dur
        print ("----------------------------")
        print ("Iteration {0: 3d}".format(ib))
        print ("Start  :", uDATE[a])
        print ("Stop   :", uDATE[b])
        dur = uDATE[b] - uDATE[a]
        ONDUR = ONDUR + dur
        print ("OnSKY  :", dur)
        cfbson = count (DATE, uDATE[a], uDATE[b])
        NFBSON = NFBSON + cfbson
        print ("#fbsons:", cfbson)
        print ("rate   :{0:4.2f}".format(cfbson / dur.total_seconds()* 3600))
        a = b+1
    # last iteration
    if len(breaks) == 0:
        dur = dt.timedelta (0)
        ib = 0
    else:
        dur = uDATE[a] - uDATE[b]
    print ("----------------------------")
    print ("Offsky :", dur)
    OFFDUR = OFFDUR + dur
    b = -1
    print ("----------------------------")
    print ("Iteration {0: 3d}".format(ib+1))
    print ("Start  :", uDATE[a])
    print ("Stop   :", uDATE[b])
    dur = uDATE[b] - uDATE[a]
    ONDUR = ONDUR + dur
    print ("OnSKY  :", dur)
    cfbson = count (DATE, uDATE[a], uDATE[b])
    NFBSON = NFBSON + cfbson
    print ("#fbsons:", cfbson)
    print ("rate   :{0:4.2f}".format(cfbson / dur.total_seconds() * 3600))

    if args.summary:
        print ("----------------------------")
        print ("TOTAL ONSKY= ", ONDUR)
        print ("TOTAL OFFSKY=", OFFDUR)
        print ("TOTAL FBSON= ", NFBSON)
        onts = ONDUR.total_seconds()
        ofts = OFFDUR.total_seconds()
        print ("UPTIME[%]=    {0:4.2f}".format(100*onts/(onts+ofts)) )
        print ("rate     =    {0:4.2f}".format(NFBSON/onts * 3600) )

    if args.k:
        print ("----------------------------")
        udm, cdm = np.unique (DM, return_counts=True)
        ac  = np.argsort (cdm)
        for ii in ac[-args.k:]:
            print ("DM={0:3.2f} Count={1:04d}".format(udm[ii], cdm[ii]))

    if args.plotscat:
        fig, ax = plt.subplots(2,2)
        scad = dict()
        scad['marker'] = 'x'
        scad['s']      = 5
        scad['alpha']  = 0.6
        #  dm v/s wd
        xa = ax[0,0]
        xa.set_xlabel ("DM [pc/cc]")
        xa.set_xscale ('log')
        xa.set_xlim (20, 1100)
        xa.set_ylabel ("Width [ms]")
        xa.set_ylim (1, 100)
        xa.set_yscale ('log')
        xa.scatter (DM, WD, **scad)
        #  dm v/s s/n
        xa = ax[1,0]
        xa.set_xlabel ("DM [pc/cc]")
        xa.set_xscale ('log')
        xa.set_xlim (20, 1100)
        xa.set_ylabel ("S/N")
        xa.set_yscale ('log')
        xa.set_ylim (6, 100)
        xa.scatter (DM, SN, **scad)
        #  wd v/s sn
        xa = ax[1,1]
        xa.set_xlabel ("Width [ms]")
        xa.set_xlim (1, 100)
        xa.set_xscale ('log')
        xa.set_ylabel ("S/N")
        xa.set_yscale ('log')
        xa.set_ylim (6, 100)
        xa.scatter (WD, SN, **scad)
        # 
        xa = ax[0,1]
        xa.axis('off')
        sf = "{0} [{3}] -> $\mu={1:3.2f}$ $\sigma={2:4.2f}"
        # share axes
        ax[0,0].get_shared_x_axes().join (ax[0,0], ax[1,0])
        ax[1,0].get_shared_y_axes().join (ax[1,0], ax[1,1])
        #
        fig.suptitle (" ".join(args.dir))
        fig.tight_layout()
        plt.savefig (args.plotscat)

