#!/usr/bin/env python
import datetime as dt
DATEFMT = "%Y%m%d_%H%M%S"
import numpy as np
# 20191219_043911_muos_ea99_dm224.75_sn8.50.fbson
# 0-------1------2----3----4--------5
def oneAction (filename):
    '''Takes filename and returns 
    datetime object, ant, sn, dm'''
    fname = filename.strip()
    toks = fname.split ("_")
    date_str, ant = None, None
    sn, dm = None, None
    ret = None
    try:
        date_str = "_".join(toks[:2])
        ant = toks[3]
        ret = dt.datetime.strptime(date_str, DATEFMT) 
        dm  = float(toks[4][2:])
        sn  = float(toks[5][2:-6]) 
    except Exception as e:
        print ("exp=", e)
        print ( "Error reading fbson:", fname )
    return ret, ant, sn, dm

def ParseArgs():
    import argparse
    '''For argument parsing'''
    ap = argparse.ArgumentParser(prog='agdatelog', description='Asgard tool for fbson dump logkeeping.', epilog='Part of Asgard')
    add = ap.add_argument
    add('dir', help = 'Directory/list of fbsons.', type=str, default="/mnt/ssd/dumps")
    # last known
    add('--later', help = 'Last known/processed fbson. Either *.list or *.fbson.', default=None, dest='last')
    # maxgap
    add('--gap', help = 'Maximum gap between fbsons (in minutes).', default=150, dest='gap', type=int)
    # summary
    add('-s', help = 'Summary statistics', default=False, action='store_true', dest='summary')
    # o
    add('-o', help = 'List the sieved fbsons in a file', dest = 'list', default=None)
    return ap.parse_args()

def count (dates, start, stop):
    '''dates is array'''
    dates = np.array(dates)
    return np.sum (np.logical_and(dates >= start, dates <= stop))

if __name__ == "__main__":
    args = ParseArgs()
    print ("")
    # INPUT stage
    INPUT = None
    if args.dir.endswith ("list"):
        with open (args.dir, "r") as f:
            INPUT = f.readlines()
    elif os.path.isdir (args.dir):
        INPUT = glob.glob (os.path.join(args.dir, "*.fbson"))
    # DATE stage
    DATE, ANT, SN, DM = [],[],[],[]
    for f in INPUT:
        d,a,s,m = oneAction (f)
        DATE.append (d)
        ANT.append  (a)
        SN.append   (s)
        DM.append   (m)
    # FILTER stage
    uDATE = np.unique (DATE)
    udD   = np.diff (uDATE)
    cutoff = dt.timedelta (seconds=args.gap*60)
    breaks, = np.where (udD >= cutoff)
    # LOG stage
    NFBSON = 0
    ONDUR    = dt.timedelta(0)
    OFFDUR   = dt.timedelta(0)
    a = 0
    for ib,b in enumerate(breaks):
        if ib != 0:
            dur = uDATE[a] - uDATE[breaks[ib-1]]
            print ("----------------------------")
            print ("Offsky :", dur)
            OFFDUR = OFFDUR + dur
        print ("----------------------------")
        print ("Iteration {0: 3d}".format(ib))
        print ("Start  :", uDATE[a])
        print ("Stop   :", uDATE[b])
        dur = uDATE[b] - uDATE[a]
        ONDUR = ONDUR + dur
        print ("OnSKY  :", dur)
        cfbson = count (DATE, uDATE[a], uDATE[b])
        NFBSON = NFBSON + cfbson
        print ("#fbsons:", cfbson)
        print ("rate   :{0:4.2f}".format(cfbson / dur.total_seconds()* 3600))
        a = b+1
    # last iteration
    dur = uDATE[a] - uDATE[b]
    print ("----------------------------")
    print ("Offsky :", dur)
    OFFDUR = OFFDUR + dur
    b = -1
    print ("----------------------------")
    print ("Iteration {0: 3d}".format(ib+1))
    print ("Start  :", uDATE[a])
    print ("Stop   :", uDATE[b])
    dur = uDATE[b] - uDATE[a]
    ONDUR = ONDUR + dur
    print ("OnSKY  :", dur)
    cfbson = count (DATE, uDATE[a], uDATE[b])
    NFBSON = NFBSON + cfbson
    print ("#fbsons:", cfbson)
    print ("rate   :{0:4.2f}".format(cfbson / dur.total_seconds() * 3600))

    if args.summary:
        print ("----------------------------")
        print ("TOTAL ONSKY= ", ONDUR)
        print ("TOTAL OFFSKY=", OFFDUR)
        print ("TOTAL FBSON= ", NFBSON)
        onts = ONDUR.total_seconds()
        ofts = OFFDUR.total_seconds()
        print ("UPTIME[%]=    {0:4.2f}".format(100*onts/(onts+ofts)) )
