#!/usr/local/bin/python2.7
### constants begin
FILROOT = "/home/shining/study/MS/vLITE/mkerr/fil"
ROOT = 0
### constants end
import os
import pysigproc as psp
import matplotlib
matplotlib.use('Agg')
from numpy import unique, arange, zeros
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import gc
def ParseArgs():
    import argparse
    ap = argparse.ArgumentParser(prog='aghist', description='Asgard tool for step-wise histogram filterbank analysis', epilog='Part of Asgard')
    add = ap.add_argument
    add('fils', help='Filterbank',nargs='*')
    add('-n', help='Number of steps',default=10, type=int)
    add('-p', help='Output plot file', default=None)
    return ap.parse_args()
if __name__ == "__main__":
    args = ParseArgs()
    # no edits
    rn = range(args.n)
    # plots
    with PdfPages(args.p) as pdf:
        # file
        for fff in args.fils:
            plt.figure(dpi=300)
            fil = psp.SigprocFile(fff)
            bmin, bmax = 0, ( 2 ** fil.nbits ) - 1
            brange = arange(bmin, bmax+1)
            bcount = zeros(brange.size)
            dur_secs = (fil.tend - fil.tstart) * 86400.0
            n_secs   = dur_secs / args.n
            wid = int(n_secs / fil.tsamp)
            # work
            for i in rn:
                # gc
                i0 = int(fil.tsamp * i * n_secs)
                read = fil.unpack(i0, wid)[:,0,:]
                # we know nifs=1
                bits, counts = unique(read.ravel(), return_counts=True)
                counts = 1.0 * counts / counts.sum()
                # scaling
                fac = counts.max() - counts.min()
                counts = counts - counts.min()
                counts = counts / fac
                for b, c in zip(bits, counts):
                    bcount[brange == b] = c
                # plot
                plt.barh(brange+1, bcount, left=i, color='b')
                # txt
                for j in brange:
                    if fil.nbits < 8:
                        plt.text(i + bcount[j] + 0.05, brange[j] + 2, "{0:2.1f}%".format(100*bcount[j]), fontsize='x-small', fontweight='ultralight')
                gc.collect()
            # plot labels
            plt.ylabel('Sample')
            plt.xlabel('ISUBINT (zero based)')
            plt.tight_layout()
            plt.grid(True)
            plt.title(os.path.basename(fff))
            plt.ylim([bmin, bmax])
            plt.xlim([0,args.n])
            if fil.nbits > 2:
                plt.yticks(brange[::5]+1.5, map(lambda xx: "{0:02d}".format(xx),brange[::5]))
            else:
                plt.yticks(brange+1.5, map(lambda xx: "{0:02d}".format(xx),brange))
            plt.xticks(rn)
            pdf.savefig()
            plt.close()
